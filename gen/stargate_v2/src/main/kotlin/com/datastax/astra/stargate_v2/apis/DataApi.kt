/**
* Stargate REST API reference
* The Stargate REST API provides CRUD operations on table data managed by Stargate. Keep in mind that you will need information for the server ({databaseId} and {region}) for all of these operations.
*
* The version of the OpenAPI document: 2.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.datastax.astra.stargate_v2.apis

import com.datastax.astra.stargate_v2.models.Error
import com.datastax.astra.stargate_v2.models.InlineResponse2003
import com.datastax.astra.stargate_v2.models.InlineResponse2004

import com.datastax.astra.stargate_v2.infrastructure.ApiClient
import com.datastax.astra.stargate_v2.infrastructure.ClientException
import com.datastax.astra.stargate_v2.infrastructure.ClientError
import com.datastax.astra.stargate_v2.infrastructure.ServerException
import com.datastax.astra.stargate_v2.infrastructure.ServerError
import com.datastax.astra.stargate_v2.infrastructure.MultiValueMap
import com.datastax.astra.stargate_v2.infrastructure.RequestConfig
import com.datastax.astra.stargate_v2.infrastructure.RequestMethod
import com.datastax.astra.stargate_v2.infrastructure.ResponseType
import com.datastax.astra.stargate_v2.infrastructure.Success
import com.datastax.astra.stargate_v2.infrastructure.toMultiValue

class DataApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.datastax.astra.stargate_v2.baseUrl", "https://-.apps.astra.datastax.com")
        }
    }

    /**
    * Add rows
    * 
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param requestBody  
    * @return kotlin.collections.Map<kotlin.String, kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addRows(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>) : kotlin.collections.Map<kotlin.String, kotlin.String> {
        val localVariableConfig = addRowsRequestConfig(xCassandraToken = xCassandraToken, keyspaceId = keyspaceId, tableId = tableId, requestBody = requestBody)

        val localVarResponse = request<kotlin.collections.Map<kotlin.String, kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation addRows
    *
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param requestBody  
    * @return RequestConfig
    */
    fun addRowsRequestConfig(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>) : RequestConfig {
        val localVariableBody: kotlin.Any? = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCassandraToken?.apply { localVariableHeaders["X-Cassandra-Token"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/keyspaces/{keyspace-id}/{table-id}".replace("{"+"keyspace-id"+"}", "$keyspaceId").replace("{"+"table-id"+"}", "$tableId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Delete a row
    * 
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteRows(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String) : Unit {
        val localVariableConfig = deleteRowsRequestConfig(xCassandraToken = xCassandraToken, keyspaceId = keyspaceId, tableId = tableId, primaryKey = primaryKey)

        val localVarResponse = request<Any?>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation deleteRows
    *
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @return RequestConfig
    */
    fun deleteRowsRequestConfig(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCassandraToken?.apply { localVariableHeaders["X-Cassandra-Token"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v2/keyspaces/{keyspace-id}/{table-id}/{primary-key}".replace("{"+"keyspace-id"+"}", "$keyspaceId").replace("{"+"table-id"+"}", "$tableId").replace("{"+"primary-key"+"}", "$primaryKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Get a row
    * 
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @param fields URL escaped, comma delimited list of keys to include (optional)
    * @param pageSize restrict the number of returned items (optional)
    * @param pageState move the cursor to a particular result (optional)
    * @param sort keys to sort by (optional)
    * @param raw unwrap results (optional, default to false)
    * @return InlineResponse2003
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRows(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String, fields: kotlin.String?, pageSize: kotlin.Int?, pageState: kotlin.String?, sort: kotlin.collections.Map<kotlin.String, kotlin.String>?, raw: kotlin.Boolean?) : InlineResponse2003 {
        val localVariableConfig = getRowsRequestConfig(xCassandraToken = xCassandraToken, keyspaceId = keyspaceId, tableId = tableId, primaryKey = primaryKey, fields = fields, pageSize = pageSize, pageState = pageState, sort = sort, raw = raw)

        val localVarResponse = request<InlineResponse2003>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getRows
    *
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @param fields URL escaped, comma delimited list of keys to include (optional)
    * @param pageSize restrict the number of returned items (optional)
    * @param pageState move the cursor to a particular result (optional)
    * @param sort keys to sort by (optional)
    * @param raw unwrap results (optional, default to false)
    * @return RequestConfig
    */
    fun getRowsRequestConfig(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String, fields: kotlin.String?, pageSize: kotlin.Int?, pageState: kotlin.String?, sort: kotlin.collections.Map<kotlin.String, kotlin.String>?, raw: kotlin.Boolean?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fields != null) {
                    put("fields", listOf(fields.toString()))
                }
                if (pageSize != null) {
                    put("page-size", listOf(pageSize.toString()))
                }
                if (pageState != null) {
                    put("page-state", listOf(pageState.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), ""))
                }
                if (raw != null) {
                    put("raw", listOf(raw.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCassandraToken?.apply { localVariableHeaders["X-Cassandra-Token"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/keyspaces/{keyspace-id}/{table-id}/{primary-key}".replace("{"+"keyspace-id"+"}", "$keyspaceId").replace("{"+"table-id"+"}", "$tableId").replace("{"+"primary-key"+"}", "$primaryKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Replace a row
    * 
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @param requestBody document 
    * @param raw unwrap results (optional, default to false)
    * @return InlineResponse2004
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun replaceRows(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>, raw: kotlin.Boolean?) : InlineResponse2004 {
        val localVariableConfig = replaceRowsRequestConfig(xCassandraToken = xCassandraToken, keyspaceId = keyspaceId, tableId = tableId, primaryKey = primaryKey, requestBody = requestBody, raw = raw)

        val localVarResponse = request<InlineResponse2004>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation replaceRows
    *
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @param requestBody document 
    * @param raw unwrap results (optional, default to false)
    * @return RequestConfig
    */
    fun replaceRowsRequestConfig(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>, raw: kotlin.Boolean?) : RequestConfig {
        val localVariableBody: kotlin.Any? = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (raw != null) {
                    put("raw", listOf(raw.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCassandraToken?.apply { localVariableHeaders["X-Cassandra-Token"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/v2/keyspaces/{keyspace-id}/{table-id}/{primary-key}".replace("{"+"keyspace-id"+"}", "$keyspaceId").replace("{"+"table-id"+"}", "$tableId").replace("{"+"primary-key"+"}", "$primaryKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Search a table
    * 
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param where URL escaped JSON query using the following keys:  | Key | Operation | |---|---| | $lt | Less Than | | $lte | Less Than Or Equal To | | $gt | Greater Than | | $gte | Greater Than Or Equal To | | $ne | Not Equal To | | $in | Contained In | | $exists | A value is set for the key |  (optional)
    * @param fields URL escaped, comma delimited list of keys to include (optional)
    * @param pageSize restrict the number of returned items (optional)
    * @param pageState move the cursor to a particular result (optional)
    * @param sort keys to sort by (optional)
    * @param raw unwrap results (optional, default to false)
    * @return InlineResponse2003
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchTable(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, where: kotlin.Any?, fields: kotlin.String?, pageSize: kotlin.Int?, pageState: kotlin.String?, sort: kotlin.collections.Map<kotlin.String, kotlin.String>?, raw: kotlin.Boolean?) : InlineResponse2003 {
        val localVariableConfig = searchTableRequestConfig(xCassandraToken = xCassandraToken, keyspaceId = keyspaceId, tableId = tableId, where = where, fields = fields, pageSize = pageSize, pageState = pageState, sort = sort, raw = raw)

        val localVarResponse = request<InlineResponse2003>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation searchTable
    *
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param where URL escaped JSON query using the following keys:  | Key | Operation | |---|---| | $lt | Less Than | | $lte | Less Than Or Equal To | | $gt | Greater Than | | $gte | Greater Than Or Equal To | | $ne | Not Equal To | | $in | Contained In | | $exists | A value is set for the key |  (optional)
    * @param fields URL escaped, comma delimited list of keys to include (optional)
    * @param pageSize restrict the number of returned items (optional)
    * @param pageState move the cursor to a particular result (optional)
    * @param sort keys to sort by (optional)
    * @param raw unwrap results (optional, default to false)
    * @return RequestConfig
    */
    fun searchTableRequestConfig(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, where: kotlin.Any?, fields: kotlin.String?, pageSize: kotlin.Int?, pageState: kotlin.String?, sort: kotlin.collections.Map<kotlin.String, kotlin.String>?, raw: kotlin.Boolean?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (where != null) {
                    put("where", listOf(where.toString()))
                }
                if (fields != null) {
                    put("fields", listOf(fields.toString()))
                }
                if (pageSize != null) {
                    put("page-size", listOf(pageSize.toString()))
                }
                if (pageState != null) {
                    put("page-state", listOf(pageState.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), ""))
                }
                if (raw != null) {
                    put("raw", listOf(raw.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCassandraToken?.apply { localVariableHeaders["X-Cassandra-Token"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/keyspaces/{keyspace-id}/{table-id}".replace("{"+"keyspace-id"+"}", "$keyspaceId").replace("{"+"table-id"+"}", "$tableId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Update a row
    * 
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @param requestBody document 
    * @param raw unwrap results (optional, default to false)
    * @return InlineResponse2004
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateRows(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>, raw: kotlin.Boolean?) : InlineResponse2004 {
        val localVariableConfig = updateRowsRequestConfig(xCassandraToken = xCassandraToken, keyspaceId = keyspaceId, tableId = tableId, primaryKey = primaryKey, requestBody = requestBody, raw = raw)

        val localVarResponse = request<InlineResponse2004>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation updateRows
    *
    * @param xCassandraToken The application token for serverless databases or the token returned from the authorization endpoint for classic databases. Use this token in each request. 
    * @param keyspaceId keyspace name 
    * @param tableId table name 
    * @param primaryKey Value from the primary key column for the table. Define composite keys by separating values with slashes (&#x60;val1/val2...&#x60;) in the order they were defined. &lt;/br&gt; For example, if the composite key was defined as &#x60;PRIMARY KEY(race_year, race_name)&#x60; then the primary key in the path would be &#x60;race_year/race_name&#x60;  
    * @param requestBody document 
    * @param raw unwrap results (optional, default to false)
    * @return RequestConfig
    */
    fun updateRowsRequestConfig(xCassandraToken: kotlin.String, keyspaceId: kotlin.String, tableId: kotlin.String, primaryKey: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>, raw: kotlin.Boolean?) : RequestConfig {
        val localVariableBody: kotlin.Any? = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (raw != null) {
                    put("raw", listOf(raw.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCassandraToken?.apply { localVariableHeaders["X-Cassandra-Token"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v2/keyspaces/{keyspace-id}/{table-id}/{primary-key}".replace("{"+"keyspace-id"+"}", "$keyspaceId").replace("{"+"table-id"+"}", "$tableId").replace("{"+"primary-key"+"}", "$primaryKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
