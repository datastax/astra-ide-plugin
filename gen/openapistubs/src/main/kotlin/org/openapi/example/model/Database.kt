/**
* Astra DevOps API
* Use this REST API to perform lifecycle actions for DataStax Astra databases.</br> </br> To get started, get your application token from your Astra database. You can then create, terminate, resize, park, and unpark databases using the DevOps API. You cannot park, unpark, or resize serverless databases.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
*
* The version of the OpenAPI document: 2.0.0
* Contact: ad-astra@datastax.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapi.example.model

import org.openapi.example.model.DatabaseInfo
import org.openapi.example.model.StatusEnum
import org.openapi.example.model.Storage

import com.squareup.moshi.Json

/**
 * Database contains the key information about a database
 * @param id 
 * @param orgId 
 * @param ownerId 
 * @param info 
 * @param status 
 * @param creationTime CreationTime in ISO RFC3339 format
 * @param terminationTime TerminationTime in ISO RFC3339 format
 * @param storage 
 * @param availableActions 
 * @param message Message to the customer about the cluster
 * @param studioUrl 
 * @param grafanaUrl 
 * @param cqlshUrl 
 * @param graphqlUrl 
 * @param dataEndpointUrl 
 */

data class Database (
    @Json(name = "id")
    val id: kotlin.String,
    @Json(name = "orgId")
    val orgId: kotlin.String,
    @Json(name = "ownerId")
    val ownerId: kotlin.String,
    @Json(name = "info")
    val info: DatabaseInfo,
    @Json(name = "status")
    val status: StatusEnum,
    /* CreationTime in ISO RFC3339 format */
    @Json(name = "creationTime")
    val creationTime: kotlin.String? = null,
    /* TerminationTime in ISO RFC3339 format */
    @Json(name = "terminationTime")
    val terminationTime: kotlin.String? = null,
    @Json(name = "storage")
    val storage: Storage? = null,
    @Json(name = "availableActions")
    val availableActions: kotlin.collections.List<Database.AvailableActions>? = null,
    /* Message to the customer about the cluster */
    @Json(name = "message")
    val message: kotlin.String? = null,
    @Json(name = "studioUrl")
    val studioUrl: kotlin.String? = null,
    @Json(name = "grafanaUrl")
    val grafanaUrl: kotlin.String? = null,
    @Json(name = "cqlshUrl")
    val cqlshUrl: kotlin.String? = null,
    @Json(name = "graphqlUrl")
    val graphqlUrl: kotlin.String? = null,
    @Json(name = "dataEndpointUrl")
    val dataEndpointUrl: kotlin.String? = null
) {

    /**
     * 
     * Values: park,unpark,resize,resetPassword,addKeyspace,addDatacenters,terminateDatacenter,getCreds,terminate,removeKeyspace,addTable,removeMigrationProxy,launchMigrationProxy
     */
    enum class AvailableActions(val value: kotlin.String) {
        @Json(name = "park") park("park"),
        @Json(name = "unpark") unpark("unpark"),
        @Json(name = "resize") resize("resize"),
        @Json(name = "resetPassword") resetPassword("resetPassword"),
        @Json(name = "addKeyspace") addKeyspace("addKeyspace"),
        @Json(name = "addDatacenters") addDatacenters("addDatacenters"),
        @Json(name = "terminateDatacenter") terminateDatacenter("terminateDatacenter"),
        @Json(name = "getCreds") getCreds("getCreds"),
        @Json(name = "terminate") terminate("terminate"),
        @Json(name = "removeKeyspace") removeKeyspace("removeKeyspace"),
        @Json(name = "addTable") addTable("addTable"),
        @Json(name = "removeMigrationProxy") removeMigrationProxy("removeMigrationProxy"),
        @Json(name = "launchMigrationProxy") launchMigrationProxy("launchMigrationProxy");
    }
}

