{
  "openapi": "3.0.0",
  "info": {
    "description": "Use this REST API to perform lifecycle actions for DataStax Astra databases.</br> </br> To get started, get your application token from your Astra database. You can then create, terminate, resize, park, and unpark databases using the DevOps API. You cannot park, unpark, or resize serverless databases.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "version": "2.0.0",
    "title": "Astra DevOps API",
    "contact": {
      "email": "ad-astra@datastax.com"
    }
  },
  "security": [
    {
      "Bearer": [
        "org-db-create",
        "org-db-terminate",
        "org-db-view",
        "org-db-expand",
        "org-db-suspend",
        "db-keyspace-create",
        "db-cql"
      ]
    }
  ],
  "tags": [
    {
      "name": "Operations",
      "description": "The DevOps APIs are for interacting with Astra databases and all aspects of their lifecycle"
    }
  ],
  "paths": {
    "/v2/databases": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Returns a list of databases",
        "description": "Get a list of databases visible to the user",
        "security": [
          {
            "Bearer": [
              "org-db-view"
            ]
          }
        ],
        "operationId": "listDatabases",
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "description": "Allows filtering so that databases in listed states are returned",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "nonterminated",
                "all",
                "active",
                "pending",
                "preparing",
                "prepared",
                "initializing",
                "parked",
                "parking",
                "unparking",
                "terminating",
                "terminated",
                "resizing",
                "error",
                "maintenance"
              ],
              "default": "nonterminated"
            }
          },
          {
            "in": "query",
            "name": "provider",
            "description": "Allows filtering so that databases from a given provider are returned",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "GCP",
                "AWS",
                "AZURE"
              ],
              "default": "ALL"
            }
          },
          {
            "in": "query",
            "name": "starting_after",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional parameter for pagination purposes. Used as this value for starting retrieving a specific page of results"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false,
            "description": "Optional parameter for pagination purposes. Specify the number of items for one page of data"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Database"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Create a new database",
        "description": "Takes a user provided databaseInfo and returns the uuid for a new database",
        "security": [
          {
            "Bearer": [
              "org-db-create"
            ]
          }
        ],
        "operationId": "createDatabase",
        "requestBody": {
          "description": "Definition of new database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseInfoCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "description": "Database UUID"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Finds database by ID",
        "description": "Returns specified database",
        "security": [
          {
            "Bearer": [
              "org-db-view"
            ]
          }
        ],
        "operationId": "getDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}/keyspaces/{keyspaceName}": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Adds keyspace into database",
        "description": "Adds the specified keyspace to the database",
        "security": [
          {
            "Bearer": [
              "db-keyspace-create"
            ]
          }
        ],
        "operationId": "addKeyspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          },
          {
            "$ref": "#/components/parameters/KeyspaceNameParam"
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}/secureBundleURL": {
      "post": {
        "summary": "Obtain zip for connecting to the database",
        "description": "Returns a temporary URL to download a zip file with certificates for connecting to the database. The URL expires after five minutes.<p>There are two types of the secure bundle URL: <ul><li><b>Internal</b> - Use with VPC peering connections to use private networking and avoid public internet for communication.</li> <li><b>External</b> - Use with any connection where the public internet is sufficient for communication between the application and the Astra database with MTLS.</li></ul> Both types support MTLS for communication via the driver.</p>",
        "security": [
          {
            "Bearer": [
              "db-cql"
            ]
          }
        ],
        "operationId": "generateSecureBundleURL",
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials provides a link to download cluster secure-connect-*.zip file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredsURL"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}/terminate": {
      "post": {
        "summary": "Terminates a database",
        "description": "Terminates a database",
        "security": [
          {
            "Bearer": [
              "org-db-terminate"
            ]
          }
        ],
        "operationId": "terminateDatabase",
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          },
          {
            "in": "query",
            "name": "preparedStateOnly",
            "description": "For internal use only.  Used to safely terminate prepared databases.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}/park": {
      "post": {
        "summary": "Parks a database",
        "description": "Parks a database",
        "security": [
          {
            "Bearer": [
              "org-db-suspend"
            ]
          }
        ],
        "operationId": "parkDatabase",
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}/unpark": {
      "post": {
        "summary": "Unparks a database",
        "description": "Unparks a database",
        "security": [
          {
            "Bearer": [
              "org-db-suspend"
            ]
          }
        ],
        "operationId": "unparkDatabase",
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}/resize": {
      "post": {
        "summary": "Resizes a database",
        "description": "Resizes a database. Total number of capacity units desired should be specified. Reducing a size of a database is not supported at this time.",
        "security": [
          {
            "Bearer": [
              "org-db-expand"
            ]
          }
        ],
        "operationId": "resizeDatabase",
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          }
        ],
        "requestBody": {
          "description": "Map containing capacityUnits key with a value greater than the current number of capacity units (max increment of 3 additional capacity units)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CapacityUnits"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/databases/{databaseID}/resetPassword": {
      "post": {
        "summary": "Resets Password",
        "description": "Sets a database password to the one specified in POST body",
        "security": [
          {
            "Bearer": [
              "org-db-create"
            ]
          }
        ],
        "operationId": "resetPassword",
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DatabaseIdParam"
          }
        ],
        "requestBody": {
          "description": "Map containing username and password. The specified password will be updated for the specified database user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPassword"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/availableRegions": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Returns supported regions and availability for a given user and organization",
        "description": "Returns all supported tier, cloud, region, count, and capacitity combinations",
        "security": [
          {
            "Bearer": [
              "org-db-create"
            ]
          }
        ],
        "operationId": "listAvailableRegions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableRegionCombination"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.astra.datastax.com"
    }
  ],
  "components": {
    "parameters": {
      "DatabaseIdParam": {
        "in": "path",
        "name": "databaseID",
        "required": true,
        "description": "String representation of the database ID",
        "schema": {
          "type": "string"
        }
      },
      "TagNameParam": {
        "in": "path",
        "name": "tagName",
        "required": true,
        "description": "Name of database tag",
        "schema": {
          "type": "string"
        }
      },
      "KeyspaceNameParam": {
        "in": "path",
        "name": "keyspaceName",
        "required": true,
        "description": "Name of database keyspace",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "ServiceAccountTokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The application token. Use this token in each request.",
            "example": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDA..."
          }
        }
      },
      "ServiceAccountTokenInput": {
        "type": "object",
        "required": [
          "clientName",
          "clientId",
          "clientSecret"
        ],
        "properties": {
          "clientName": {
            "type": "string",
            "description": "The organization name in a more human readable format",
            "example": "Binford Tools"
          },
          "clientId": {
            "type": "string",
            "description": "The unique identifier for the client for authentication",
            "example": "binford"
          },
          "clientSecret": {
            "type": "string",
            "description": "The UUID client secret for the service account from the create service account response in the user interface",
            "format": "uuid",
            "example": "00b03a37-209c-462a-971b-be35ab3321de"
          }
        }
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "PENDING",
          "PREPARING",
          "PREPARED",
          "INITIALIZING",
          "PARKED",
          "PARKING",
          "UNPARKING",
          "TERMINATED",
          "TERMINATING",
          "RESIZING",
          "ERROR",
          "MAINTENANCE",
          "UNKNOWN"
        ],
        "example": "ACTIVE"
      },
      "Database": {
        "type": "object",
        "description": "Database contains the key information about a database",
        "required": [
          "id",
          "orgId",
          "ownerId",
          "info",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "1234-5678-91011121-3141"
          },
          "orgId": {
            "type": "string",
            "example": "organizations/7142-1283-54249566-3707"
          },
          "ownerId": {
            "type": "string",
            "example": "users/8243-2404-85664728-0889"
          },
          "info": {
            "$ref": "#/components/schemas/DatabaseInfo"
          },
          "creationTime": {
            "type": "string",
            "description": "CreationTime in ISO RFC3339 format",
            "example": "2012-11-01T22:08:41+00:00"
          },
          "terminationTime": {
            "type": "string",
            "description": "TerminationTime in ISO RFC3339 format",
            "example": "2019-11-01T22:08:41+00:00"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "storage": {
            "$ref": "#/components/schemas/Storage"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "park",
                "unpark",
                "resize",
                "resetPassword",
                "addKeyspace",
                "addDatacenters",
                "terminateDatacenter",
                "getCreds",
                "terminate",
                "suspend",
                "removeKeyspace",
                "addTable",
                "removeMigrationProxy",
                "launchMigrationProxy"
              ],
              "example": "park, terminate"
            }
          },
          "message": {
            "type": "string",
            "description": "Message to the customer about the cluster",
            "example": "Auto parked due to inactivity"
          },
          "studioUrl": {
            "type": "string",
            "example": "http://path-to-studio:port"
          },
          "grafanaUrl": {
            "type": "string",
            "example": "http://path-to-grafana:port"
          },
          "cqlshUrl": {
            "type": "string",
            "example": "http://path-to-cqlsh:port/cqlsh"
          },
          "graphqlUrl": {
            "type": "string",
            "example": "http://path-to-graqphl:port/api/graphql"
          },
          "dataEndpointUrl": {
            "type": "string",
            "example": "http://path-to-dataendpoint:port/api/rest"
          }
        }
      },
      "DatabaseInfoCreate": {
        "type": "object",
        "required": [
          "name",
          "keyspace",
          "cloudProvider",
          "tier",
          "capacityUnits",
          "region"
        ],
        "description": "DatabaseInfo is the user-provided information describing a database",
        "properties": {
          "name": {
            "type": "string",
            "example": "mySplendidDatabase",
            "description": "Name of the database--user friendly identifier"
          },
          "keyspace": {
            "type": "string",
            "example": "myKeyspace",
            "description": "Keyspace name in database"
          },
          "cloudProvider": {
            "type": "string",
            "example": "AWS",
            "enum": [
              "AWS",
              "GCP"
            ],
            "description": "This is the cloud provider where the database lives."
          },
          "tier": {
            "type": "string",
            "example": "serverless",
            "enum": [
              "serverless"
            ],
            "description": "With the exception of classic databases, all databases are serverless. Classic databases can no longer be created with the DevOps API."
          },
          "capacityUnits": {
            "type": "integer",
            "example": 1,
            "minimum": 1,
            "maximum": 1,
            "description": "Capacity units were used for classic databases, but are not used for serverless databases. Enter 1 CU for serverless databases. Classic databases can no longer be created with the DevOps API."
          },
          "region": {
            "type": "string",
            "example": "us-west-2",
            "description": "Region refers to the cloud region."
          }
        }
      },
      "DatabaseInfo": {
        "type": "object",
        "description": "DatabaseInfo is the user-provided information describing a database",
        "properties": {
          "name": {
            "type": "string",
            "example": "mySplendidDatabase",
            "description": "Name of the database--user friendly identifier"
          },
          "keyspace": {
            "type": "string",
            "example": "myKeyspace",
            "description": "Keyspace name in database"
          },
          "cloudProvider": {
            "type": "string",
            "example": "AWS",
            "enum": [
              "AWS",
              "GCP"
            ],
            "description": "This is the cloud provider where the database lives."
          },
          "tier": {
            "type": "string",
            "example": "serverless",
            "enum": [
              "serverless"
            ],
            "description": "With the exception of classic databases, all databases are serverless. Classic databases can no longer be created with the DevOps API."
          },
          "capacityUnits": {
            "type": "integer",
            "example": 1,
            "minimum": 1,
            "maximum": 1,
            "description": "Capacity units were used for classic databases, but are not used for serverless databases. Enter 1 CU for serverless databases. Classic databases can no longer be created with the DevOps API."
          },
          "region": {
            "type": "string",
            "example": "us-west-2",
            "description": "Region refers to the cloud region."
          },
          "user": {
            "type": "string",
            "example": "db_admin",
            "description": "User is the user to access the database"
          },
          "password": {
            "type": "string",
            "example": "*****",
            "description": "Password for the user to access the database"
          },
          "keyspaces": {
            "type": "array",
            "maximum": 1,
            "items": {
              "type": "string",
              "example": "additionalKeyspace"
            },
            "description": "Additional keyspaces names in database"
          }
        }
      },
      "CredsURL": {
        "description": "CredsURL from which the creds zip may be downloaded",
        "type": "object",
        "required": [
          "downloadURL"
        ],
        "properties": {
          "downloadURL": {
            "type": "string",
            "example": "nifty.cloud.datastax.com:9092",
            "description": "DownloadURL is only valid for about 5 minutes"
          },
          "downloadURLInternal": {
            "type": "string",
            "example": "internal-nifty.cloud.datastax.com:9092",
            "description": "Internal DownloadURL is only valid for about 5 minutes"
          },
          "downloadURLMigrationProxy": {
            "type": "string",
            "example": "proxy-nifty.cloud.datastax.com:9092",
            "description": "Migration Proxy DownloadURL is only valid for about 5 minutes"
          },
          "downloadURLMigrationProxyInternal": {
            "type": "string",
            "example": "proxy-nifty.cloud.datastax.com:9092",
            "description": "Internal Migration Proxy DownloadURL is only valid for about 5 minutes"
          }
        }
      },
      "UserPassword": {
        "description": "UserPassword specifies a username and new password. The specified password will be updated for the specified database user",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "dbusername"
          },
          "password": {
            "type": "string",
            "example": "MyNewSecur3Passw0rd",
            "description": "New password (min 6 characters)"
          }
        }
      },
      "MigrationProxyConfiguration": {
        "description": "Configuration of the migration proxy and mappings of astra node to a customer node currently in use",
        "type": "object",
        "required": [
          "originUsername",
          "originPassword",
          "mappings"
        ],
        "properties": {
          "originUsername": {
            "type": "string",
            "example": "cassandraUsername",
            "description": "origin cassandra username"
          },
          "originPassword": {
            "type": "string",
            "example": "cassandraPassword",
            "description": "origin cassandra password"
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigrationProxyMapping"
            }
          }
        }
      },
      "MigrationProxyMapping": {
        "description": "A mapping of astra node to a customer node currently in use",
        "type": "object",
        "required": [
          "originIP",
          "originPort",
          "rack",
          "rackNodeOrdinal"
        ],
        "properties": {
          "originIP": {
            "type": "string",
            "example": "172.18.19.20",
            "description": "ip on which the node currently in use is accessible"
          },
          "originPort": {
            "type": "integer",
            "example": 9042,
            "description": "port on which the node currently in use is accessible"
          },
          "rack": {
            "type": "integer",
            "example": 2,
            "description": "the number of the rack, usually 0, 1, or 2"
          },
          "rackNodeOrdinal": {
            "type": "integer",
            "example": 1,
            "description": "The number of the node in a given rack, starting with 0"
          }
        }
      },
      "CapacityUnits": {
        "description": "CapacityUnits is used to horizontally scale a database.",
        "type": "object",
        "properties": {
          "capacityUnits": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "example": 4,
            "description": "CapacityUnits an be increased by a max of three additional capacity units per operation. Reducing capacity units is not supported at this time"
          }
        }
      },
      "Storage": {
        "description": "Storage contains the information about how much storage space a cluster has available",
        "type": "object",
        "required": [
          "nodeCount",
          "replicationFactor",
          "totalStorage"
        ],
        "properties": {
          "nodeCount": {
            "type": "integer",
            "example": 6,
            "description": "NodeCount for the cluster"
          },
          "replicationFactor": {
            "type": "integer",
            "example": 3,
            "description": "ReplicationFactor is the number of nodes storing a piece of data"
          },
          "totalStorage": {
            "type": "integer",
            "example": 800,
            "description": "TotalStorage of the cluster in GB"
          },
          "usedStorage": {
            "type": "integer",
            "example": 348,
            "description": "UsedStorage in GB"
          }
        }
      },
      "RegionCombination": {
        "type": "object",
        "description": "RegionCombination defines a Tier, cloud provider, region combination",
        "required": [
          "tier",
          "cloudProvider",
          "region",
          "cost"
        ],
        "properties": {
          "tier": {
            "type": "string",
            "example": "Free"
          },
          "cloudProvider": {
            "type": "string",
            "example": "GCP"
          },
          "region": {
            "type": "string",
            "example": "us-east1"
          },
          "cost": {
            "$ref": "#/components/schemas/Costs"
          }
        }
      },
      "AvailableRegionCombination": {
        "type": "object",
        "description": "AvailableRegionCombination defines a Tier, cloud provider, region combination",
        "required": [
          "tier",
          "cloudProvider",
          "region",
          "cost",
          "databaseCountUsed",
          "databaseCountLimit",
          "capacityUnitsUsed",
          "capacityUnitsLimit",
          "defaultStoragePerCapacityUnitGb"
        ],
        "properties": {
          "tier": {
            "type": "string",
            "example": "Free"
          },
          "cloudProvider": {
            "type": "string",
            "example": "GCP"
          },
          "region": {
            "type": "string",
            "example": "us-east1"
          },
          "cost": {
            "$ref": "#/components/schemas/Costs"
          },
          "databaseCountUsed": {
            "type": "integer",
            "example": 0
          },
          "databaseCountLimit": {
            "type": "integer",
            "example": 1
          },
          "capacityUnitsUsed": {
            "type": "integer",
            "example": 0
          },
          "capacityUnitsLimit": {
            "type": "integer",
            "example": 30
          },
          "defaultStoragePerCapacityUnitGb": {
            "type": "integer",
            "example": 500
          }
        }
      },
      "Costs": {
        "properties": {
          "costPerMinCents": {
            "type": "number",
            "format": "double",
            "example": 0
          },
          "costPerHourCents": {
            "type": "number",
            "format": "double",
            "example": 0
          },
          "costPerDayCents": {
            "type": "number",
            "format": "double",
            "example": 0
          },
          "costPerMonthCents": {
            "type": "number",
            "format": "double",
            "example": 0
          },
          "costPerMinParkedCents": {
            "type": "number",
            "format": "double",
            "example": 0
          },
          "costPerHourParkedCents": {
            "type": "number",
            "format": "double",
            "example": 0
          },
          "costPerDayParkedCents": {
            "type": "number",
            "format": "double",
            "example": 0
          },
          "costPerMonthParkedCents": {
            "type": "number",
            "format": "double",
            "example": 0
          }
        }
      },
      "Errors": {
        "description": "Errors is a collection of individual Error objects",
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Error": {
        "description": "ModelError information that is returned to users",
        "type": "object",
        "required": [
          "id",
          "message"
        ],
        "properties": {
          "ID": {
            "type": "integer",
            "example": 123,
            "description": "API specific error code"
          },
          "message": {
            "type": "string",
            "example": "Something is broken",
            "description": "User-friendly description of error"
          }
        }
      }
    },
    "responses": {
      "Ok": {
        "description": "The request completed successfully"
      },
      "Accepted": {
        "description": "The request was accepted"
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "The user is unauthorized to perform the operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified database was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "Conflict": {
        "description": "The database is not in a valid state to perform the operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "The structured data in the request could not be parsed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "ServerError": {
        "description": "A server error occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "description": "A token must be passed in header to access the API",
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
