/**
* Stargate REST API reference
* The Stargate REST API provides CRUD operations on table data managed by Stargate. Keep in mind that you will need information for the server ({databaseId} and {region}) for all of these operations.
*
* The version of the OpenAPI document: 2.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.datastax.astra.stargate_v2.models


import com.squareup.moshi.Json

/**
 * 
 * @param name Name for the column, which must be unique.
 * @param typeDefinition The type of data allowed in the column.
 * @param static Denotes whether the column is shared by all rows of a partition.
 */

data class ColumnDefinition (
    /* Name for the column, which must be unique. */
    @Json(name = "name")
    val name: kotlin.String,
    /* The type of data allowed in the column. */
    @Json(name = "typeDefinition")
    val typeDefinition: ColumnDefinition.TypeDefinition,
    /* Denotes whether the column is shared by all rows of a partition. */
    @Json(name = "static")
    val static: kotlin.Boolean? = null
) {

    /**
     * The type of data allowed in the column.
     * Values: ASCII,TEXT,VARCHAR,TINYINT,SMALLINT,INT,BIGINT,VARINT,DECIMAL,FLOAT,DOUBLE,DATE,DATE_RANGE_TYPE,DURATION,TIME,TIMESTAMP,UUID,TIMEUUID,BLOB,BOOLEAN,COUNTER,INET,POINT_TYPE,LINE_STRING_TYPE,POLYGON_TYPE,FROZEN,LIST,MAP,SET,TUPLE
     */
    enum class TypeDefinition(val value: kotlin.String) {
        @Json(name = "ascii") ASCII("ascii"),
        @Json(name = "text") TEXT("text"),
        @Json(name = "varchar") VARCHAR("varchar"),
        @Json(name = "tinyint") TINYINT("tinyint"),
        @Json(name = "smallint") SMALLINT("smallint"),
        @Json(name = "int") INT("int"),
        @Json(name = "bigint") BIGINT("bigint"),
        @Json(name = "varint") VARINT("varint"),
        @Json(name = "decimal") DECIMAL("decimal"),
        @Json(name = "float") FLOAT("float"),
        @Json(name = "double") DOUBLE("double"),
        @Json(name = "date") DATE("date"),
        @Json(name = "DateRangeType") DATE_RANGE_TYPE("DateRangeType"),
        @Json(name = "duration") DURATION("duration"),
        @Json(name = "time") TIME("time"),
        @Json(name = "timestamp") TIMESTAMP("timestamp"),
        @Json(name = "uuid") UUID("uuid"),
        @Json(name = "timeuuid") TIMEUUID("timeuuid"),
        @Json(name = "blob") BLOB("blob"),
        @Json(name = "boolean") BOOLEAN("boolean"),
        @Json(name = "counter") COUNTER("counter"),
        @Json(name = "inet") INET("inet"),
        @Json(name = "PointType") POINT_TYPE("PointType"),
        @Json(name = "LineStringType") LINE_STRING_TYPE("LineStringType"),
        @Json(name = "PolygonType") POLYGON_TYPE("PolygonType"),
        @Json(name = "frozen") FROZEN("frozen"),
        @Json(name = "list") LIST("list"),
        @Json(name = "map") MAP("map"),
        @Json(name = "set") SET("set"),
        @Json(name = "tuple") TUPLE("tuple");
    }
}

